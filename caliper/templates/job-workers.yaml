apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ include "caliper.fullname" . }}-workers"
  labels:
{{ include "caliper.labels" . | indent 4 }}
spec:
  parallelism: {{ .Values.replicaWorkersCount }}
  backoffLimit: 0
  ttlSecondsAfterFinished: 30
  template:
    metadata:
      labels:
        app.kubernetes.io/name: "{{ include "caliper.name" . }}-workers"
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      restartPolicy: "Never"
      imagePullSecrets:
        - name: regcred
      serviceAccountName: vault-auth
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
      - name: certificates-init
        image: index.docker.io/hyperledgerlabs/alpine-utils:1.0
        imagePullPolicy: Always
        env:
        - name: VAULT_ADDR
          value: {{ .Values.VAULT_ADDR }}
        - name: VAULT_TOKEN
          value: {{ .Values.VAULT_TOKEN }}
        - name: VAULT_APP_ROLE
          value: vault-role
        - name: ENDORSING_ORG_NAMES
          value: {{ .Values.ENDORSING_ORG_NAMES }}
        - name: MOUNT_PATH
          value: /secret
        - name: NETWORK_VERSION
          value: "2.2.0"
        - name: FABRIC_USER
          value: "admin"
        command: ["sh", "-c"]
        args:
        - |-
          #!/usr/bin/env sh
          
          set -x

          validateVaultResponse () {
          if echo ${2} | grep "errors"; then
          echo "ERROR: unable to retrieve ${1}: ${2}"
          exit 1
          fi
          }
          KUBE_SA_TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
          echo "Getting secrets from Vault Server: ${VAULT_ADDR}"
          #override using vault root token to avoid namespace not autorized error
          VAULT_CLIENT_TOKEN=$VAULT_TOKEN


          ######################################################################
          
          version2=`echo $NETWORK_VERSION | grep -c 2.`
          if [ $version2 = 1 ];then
            #Downloading Certificates for all admin users
            echo $ENDORSING_ORG_NAMES


            for ns in $ENDORSING_ORG_NAMES
            do
              vault_secret_key="secret/crypto/peerOrganizations/${ns}-net/users/${FABRIC_USER}/msp"
              echo "Getting TLS certificates from Vault using key $vault_secret_key"
              
              OUTPUT_PATH="${MOUNT_PATH}/${ns}/tls"
              LOOKUP_SECRET_RESPONSE=$(curl -sS --header "X-Vault-Token: ${VAULT_CLIENT_TOKEN}" ${VAULT_ADDR}/v1/${vault_secret_key} | jq -r 'if .errors then . else . end')
              validateVaultResponse "secret (${vault_secret_key})" "${LOOKUP_SECRET_RESPONSE}" 
                
              USER_CERT=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data["signcerts"]')
              USER_KEY=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data["keystore"]')
              
              mkdir -p ${OUTPUT_PATH}
              echo "${USER_CERT}" >> ${OUTPUT_PATH}/${FABRIC_USER}.cert
              echo "${USER_KEY}" >> ${OUTPUT_PATH}/${FABRIC_USER}.pem
              
              vault_secret_key="secret/crypto/peerOrganizations/${ns}-net/peers/peer0.${ns}-net/msp"
              echo "Getting MSP certificates from Vault using key $vault_secret_key"
              
              OUTPUT_PATH="${MOUNT_PATH}/${ns}/msp"
              LOOKUP_SECRET_RESPONSE=$(curl -sS --header "X-Vault-Token: ${VAULT_CLIENT_TOKEN}" ${VAULT_ADDR}/v1/${vault_secret_key} | jq -r 'if .errors then . else . end')
              validateVaultResponse "secret (${vault_secret_key})" "${LOOKUP_SECRET_RESPONSE}" 
              ORG_TLS_CERTS=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data["tlscacerts"]')          
              mkdir -p ${OUTPUT_PATH}/tlscacerts
              echo "${ORG_TLS_CERTS}" >> ${OUTPUT_PATH}/tlscacerts/tlsca.pem
              
              
              vault_secret_key="secret/crypto/peerOrganizations/${ns}-net/orderer/tls"
              echo "Getting Orderer certificates from Vault using key $vault_secret_key"
              LOOKUP_SECRET_RESPONSE=$(curl -sS --header "X-Vault-Token: ${VAULT_CLIENT_TOKEN}" ${VAULT_ADDR}/v1/${vault_secret_key} | jq -r 'if .errors then . else . end')
              validateVaultResponse "secret (${vault_secret_key})" "${LOOKUP_SECRET_RESPONSE}" 
              ORDERER_TLS_CERTS=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data["ca.crt"]')
              echo "${ORDERER_TLS_CERTS}" >> ${OUTPUT_PATH}/tlscacerts/orderer-tlsca.pem


            done
          fi
          echo "DONE VAULT_ADDR $VAULT_ADDR     VAULT_TOKEN   $VAULT_TOKEN   ENDORSING_ORG_NAMES $ENDORSING_ORG_NAMES "
        volumeMounts:
        - name: certificates
          mountPath: /secret
      containers:
      - name: {{ .Chart.Name }}-worker
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        args: [launch,worker]
        imagePullPolicy: {{ .Values.image.pullPolicy }}        
        volumeMounts:
          - name: caliper--yaml-config
            mountPath: /hyperledger/caliper/workspace/microBenchMarkconfig.yaml
            subPath: microBenchMarkconfig.yaml   
          - name: caliper--yaml-config
            mountPath: /hyperledger/caliper/workspace/caliperNetworkConfig.yaml
            subPath: caliperNetworkConfig.yaml
          - name: {{ include "caliper.fullname" . }}--yaml-config
            mountPath: /hyperledger/caliper/workspace/createBid.js
            subPath: createBid.js
          - name: {{ include "caliper.fullname" . }}--yaml-config
            mountPath: /hyperledger/caliper/workspace/createOffer.js
            subPath: createOffer.js
          - name: {{ include "caliper.fullname" . }}--yaml-config
            mountPath: /hyperledger/caliper/workspace/carrierConnectionProfile.yaml
            subPath: carrierConnectionProfile.yaml
          - name: {{ include "caliper.fullname" . }}--yaml-config
            mountPath: /hyperledger/caliper/workspace/manufacturerConnectionProfile.yaml
            subPath: manufacturerConnectionProfile.yaml
          - name: {{ include "caliper.fullname" . }}--yaml-config
            mountPath: /hyperledger/caliper/workspace/caliper.yaml
            subPath: caliper.yaml
          - name: {{ include "caliper.fullname" . }}--yaml-config
            mountPath: /hyperledger/caliper/workspace/simpleauction/go.mod
            subPath: go.mod
          - name: {{ include "caliper.fullname" . }}--yaml-config
            mountPath: /hyperledger/caliper/workspace/simpleauction/simpleAuction.go
            subPath: simpleAuction.go
          - name: certificates
            mountPath: /hyperledger/caliper/workspace/secret
        env:
        - name: CALIPER_BIND_SUT
          value: fabric:2.1.0
        - name: CALIPER_BIND_SDK
          value: 2.1.0
        - name: CALIPER_BENCHCONFIG
          value: microBenchMarkconfig.yaml
        - name: CALIPER_NETWORKCONFIG
          value: caliperNetworkConfig.yaml
        - name: CALIPER_WORKER_REMOTE
          value: "true"
        - name: CALIPER_WORKER_COMMUNICATION_METHOD
          value: "mqtt"
        - name: CALIPER_WORKER_COMMUNICATION_ADDRESS
          value: "mqtt://caliper-mosquitto:1883"
        ports:
        - containerPort: 1883
      volumes:
      - name: caliper--yaml-config
        configMap:
          name: caliper--yaml-config
          defaultMode: 0744 
      - name: certificates
        emptyDir: {}
